'''

#Calcula aproximación de Pi usando acumulador


def aproximarValorPi(terminos):
    suma = 0  #Acumulador
    for denominador in range(1, terminos+1):
        suma += 1/denominador**2

    return(6*suma)**0.5


def main():
    terminos = int(input("Teclea cuántos términos quieres: "))
    aproximacionPi = aproximarValorPi(terminos)
    print("PI = ", aproximacionPi)


main()

'''

"----------------------------------------------------------------------------------------------------"

'''

#Dibujo en pygame

# encoding: UTF-8
# Autor: Roberto Martínez Román
# Muestra cómo utilizar pygame en programas que dibujan en la pantalla

import pygame   # Librería de pygame

# Dimensiones de la pantalla
ANCHO = 800
ALTO = 600
# Colores
BLANCO = (255, 255, 255)  # R,G,B en el rango [0,255], 0 ausencia de color, 255 toda la intensidad
VERDE_BANDERA = (27, 94, 32)    # un poco de rojo, más de verde, un poco de azul
ROJO = (255, 0, 0)      # solo rojo, nada de verde, nada de azul
AZUL = (0, 0, 255)      # nada de rojo, ni verde, solo azul


# Estructura básica de un programa que usa pygame para dibujar
def dibujarFondo(ventana, imgFondo):
    ventana.blit(imgFondo, (0, 0))


def dibujarCuadricula(ventana, imgCuadro):
    for renglon in range(8):
        #Para cada renglón, se necesitan 11 columnas
        for columna in range(11):
            if renglon >= 2 and columna >= 4 and columna <= 5:
                pass
            else:
                ventana.blit(imgCuadro, (columna*55 + 100, renglon*33 + 100))

def dibujar():
    # Inicializa el motor de pygame
    pygame.init()
    # Crea una ventana de ANCHO x ALTO
    ventana = pygame.display.set_mode((ANCHO, ALTO))  # Crea la ventana donde dibujará
    reloj = pygame.time.Clock()  # Para limitar los fps
    termina = False  # Bandera para saber si termina la ejecución, iniciamos suponiendo que no


    #Imágenes
    imgFondo = pygame.image.load("FondoReducido.jpg")
    imgCuadro = pygame.image.load("NeoReducido.jpg")


    while not termina:  # Ciclo principal, MIENTRAS la variabel termina sea False, el ciclo se repite automáticamente
        # Procesa los eventos que recibe
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:  # El usuario hizo click en el botón de salir
                termina = True      # Queremos terminar el ciclo

        # Borrar pantalla
        ventana.fill(BLANCO)

        # Dibujar, aquí haces todos los trazos que requieras
        # Normalmente llamas a otra función y le pasas -ventana- como parámetro, por ejemplo, dibujarLineas(ventana)
        # Consulta https://www.pygame.org/docs/ref/draw.html para ver lo que puede hacer draw
        dibujarFondo(ventana, imgFondo)
        dibujarCuadricula(ventana, imgCuadro)
        pygame.display.flip()  # Actualiza trazos (Si no llamas a esta función, no se dibuja)
        reloj.tick(40)  # 40 fps

    # Después del ciclo principal
    pygame.quit()  # termina pygame


# Función principal, aquí resuelves el problema
def main():
    dibujar()   # Por ahora, solo dibuja


# Llamas a la función principal
main()

'''
